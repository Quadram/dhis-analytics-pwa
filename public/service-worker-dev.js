// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = 'dhis2-cache-v1';
var DATA_CACHE_NAME = 'dhis2-data-cache-v1';

var filesToCache = [
    '/',
    '/index.html',
    '/favicon.ico',
    '/manifest.json',
    // 'https://play.dhis2.org/android-current/api/30/userSettings',
];

// const paths = require('./paths');
// const publicPath = paths.servedPath;
// const publicUrl = publicPath.slice(0, -1);
// const getClientEnvironment = require('./env');
// const env = getClientEnvironment(publicUrl);
// var buildPath =
//     env.stringified['process.env'].NODE_ENV === '"production"'
//         ? 'PROOOOODD'
//         : 'DEEEEEEV';

// Delete old caches that are not our current one!
self.addEventListener('activate', event => {
    console.log('[Service Worker] Activating SW');
    const cacheWhitelist = [CACHE_NAME, DATA_CACHE_NAME];
    event.waitUntil(
        caches.keys().then(keyList =>
            Promise.all(
                keyList.map(key => {
                    if (!cacheWhitelist.includes(key)) {
                        console.log('[Service Worker] Deleting cache: ' + key);
                        return caches.delete(key);
                    }
                })
            )
        )
    );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
    console.log('[Service Worker] Installing SW');
    if (doCache) {
        event.waitUntil(
            caches.open(CACHE_NAME).then(function(cache) {
                // Get the assets manifest so we can see what our js file is name
                // This is because webpack hashes it
                // fetch('asset-manifest.json')
                //     .then(response => {
                //         response.json();
                //     })
                //     .then(assets => {
                // Open a cache and cache our files
                // We want to cache the page and the main.js generated by webpack
                // We could also cache any static assets like CSS or images
                // const urlsToCache = ['/', assets['main.js']]; //No funciona
                const urlsToCache = [
                    'static/js/bundle.js',
                    'static/js/bundle.js.map',
                    'static/media/MaterialIcons-Regular.570eb838.woff2',
                ]; //No borra los anteriores
                filesToCache = filesToCache.concat(urlsToCache);
                cache.addAll(filesToCache);
                console.log('[Service Worker] Listed Files Cached');
                // });
            })
        );
    }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
    if (doCache) {
        console.log('[Service Worker] Fetch', event.request.url);
        var dataUrl = 'https://play.dhis2.org/';
        if (event.request.url.indexOf(dataUrl) > -1) {
            event.respondWith(
                (async function() {
                    const cache = await caches.open(DATA_CACHE_NAME);
                    const networkResponse = await fetch(event.request).catch(
                        () => {
                            console.log('NO INTERNET');
                        }
                    );

                    if (networkResponse) {
                        event.waitUntil(
                            cache.put(event.request, networkResponse.clone())
                        );
                    }

                    const cachedResponse = await cache.match(event.request);
                    return networkResponse || cachedResponse;
                })()
            );
        } else {
            event.respondWith(
                caches.match(event.request).then(function(response) {
                    if (response) {
                        console.log(
                            '[Service Worker] FILE FROM CACHE => ' +
                                event.request.url +
                                ' [' +
                                !!response +
                                ']'
                        );
                    }
                    return response || fetch(event.request);
                })
            );
        }
    }
});
